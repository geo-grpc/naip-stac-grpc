/*
Copyright 2017-2018 Echo Park Labs

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

For additional information, contact:

email: info@echoparklabs.io
*/

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.epl.protobuf.geometry";
option java_outer_classname = "GeometryOperatorsProto";
option objc_class_prefix = "RTG";

package epl.protobuf;

/*
 gRPC Interfaces for working with geometry operators
*/
service GeometryOperators {
    // Execute a single geometry operation
    rpc ExecuteOperation(OperatorRequest) returns (OperatorResult) {}

    // Stream in requests and return a stream of results
    rpc StreamOperations(stream OperatorRequest) returns (stream OperatorResult) {}

    rpc StreamOperationsEx(stream OperatorRequest) returns (stream OperatorResult) {}

    // stream in file chunks for a geometry file type and stream back results for each geometry encountered
    rpc StreamFileOperations(stream FileChunk) returns (stream OperatorResult) {}
}

/*
  type of geometry operators
*/
enum GeometryEncodingType {
    unknown = 0;
    wkb = 1; // well-known binary
    wkt = 2; // well-known text
    geojson = 3; // geojson
    esrishape = 4; // esri shape binary
}

/*
  type of geometry operators
*/
enum ServiceOperatorType {
    Project = 0; // project geometry from one spatial reference to another

    ExportToJson = 1; // deprecated
    ImportFromJson = 2; // deprecated
    ImportMapGeometryFromJson = 3; // deprecated

    ExportToESRIShape = 4; // export geometry to esrishape binary data
    ImportFromESRIShape = 5; // import from esrishape binary data

    Union = 6; // union two or more geometries
    Difference = 7; // difference of two or more geometries

    Proximity2D = 8; // not yet exposed

    Relate = 9; // not yet exposed 9 dim
    Equals = 10; // relational operator
    Disjoint = 11; // relational operator
    Intersects = 12; // relational operator
    Within = 13; // relational operator
    Contains = 14; // relational operator
    Crosses = 15; // relational operator
    Touches = 16; // relational operator
    Overlaps = 17; // relational operator

    Buffer = 18; // create polygon that is a buffer of the inputs
    Distance = 19; // not yet exposed
    Intersection = 20; // intersection of two or more geometries
    Clip = 21; // clip a geometry or geometries by a horizon
    Cut = 22; // cut geometry
    DensifyByLength = 23;
    // DensifyByAngle = 24;
    // LabelPoint = 25;

    GeodesicBuffer = 26;
    GeodeticDensifyByLength = 27;
    // ShapePreservingDensify = 28;
    GeodeticLength = 29;
    // GeodeticArea = 30;

    Simplify = 31;
    SimplifyOGC = 32;
    Offset = 33;
    Generalize = 34;
    GeneralizeByArea = 35;

    ExportToWkb = 36;
    ImportFromWkb = 37;
    ExportToWkt = 38;
    ImportFromWkt = 39;
    ImportFromGeoJson = 40;
    ExportToGeoJson = 41;
    SymmetricDifference = 42;
    ConvexHull = 43;
    Boundary = 44;
    RandomPoints = 45;
    EnclosingCircle = 46;
}

enum OffsetJoinType {
    Round = 0;
    Bevel = 1;
    Miter = 2;
    Square =3;
}

message GeometryData {
    int64 geometry_id = 1;
    string feature_id = 9;

    GeometryEncodingType geometry_encoding_type = 2;
    // oneof block
    string wkt = 3;
    string geojson = 4;
    bytes wkb = 5;
    bytes esri_shape = 6;
    // oneof block
    SpatialReferenceData spatial_reference = 7;
}

message GeometryBagData {
    // oneof block start
    repeated int64 geometry_ids = 1;
    repeated string feature_ids = 9;
    // oneof block end

    // type can be 'wkt', 'wkb', 'geojson', or 'esri'
    GeometryEncodingType geometry_encoding_type = 2;

    repeated string wkt = 3;
    repeated string geojson = 4;
    repeated bytes wkb = 5;
    repeated bytes esri_shape = 6;

    SpatialReferenceData spatial_reference = 7;

    repeated string esri_json = 8;
}

message SpatialReferenceData {
    string proj4 = 4;
    // String that is a wkt, wkid, esri_wkt, or a proj4 string
    string esri_wkt = 5;

    // type is either 'wkid', 'esri_wkt'
    int32 wkid = 6;
}

message OperatorResult {
    GeometryBagData geometry_bag = 1;

    bool spatial_relationship = 2;

    double distance = 3;

    map<int64, bool> relate_map = 4;
}

enum FileType {
    Shapefile = 0;
}

message FileChunk {
    OperatorRequest nested_request = 1;
    GeometryEncodingType results_encoding_type = 2;

    SpatialReferenceData input_spatial_reference = 3;
    SpatialReferenceData result_spatial_reference = 5;

    bytes data = 6;
    int64 size = 7;
    int64 offset = 8;
    string file_name = 9;

    bool is_last_chunk = 10;
}

message BufferParams {
    repeated double distances = 1;
    repeated double max_deviations = 2;
    bool union_result = 3;
    int32 max_vertices_in_full_circle = 4;
}

message GeodeticBufferParams {
    repeated double distances = 1;
    repeated double max_deviations = 2;
    bool union_result = 3;
    int32 max_vertices_in_full_circle = 4;
}

message ConvexParams {
    bool merge = 1;
}

message RelateParams {
    string de_9im = 1;
}

message RandomPointsParams {
    repeated double points_per_square_km = 1;
    int64 seed = 2;
}

message GeneralizeParams {
    double max_deviation = 1;
    bool remove_degenerates = 2;
}

message GeneralizeByAreaParams {
    double percent_reduction = 1;
    bool remove_degenerates = 2;
    int32 max_point_count = 3;
}

message IntersectionParams {
    int32 dimension_mask = 1;
}

message OffsetParams {
    double distance = 1;
    OffsetJoinType join_type = 2;
    double bevel_ratio = 3;
    double flatten_error = 4;
}

message CutParams {
    bool consider_touch = 1;
}

message ClipParams {
    EnvelopeData envelope = 1;
}

message DensifyParams {
    double max_length = 1;
}

message SimplifyParams {
    bool force = 1;
}

message OperatorRequest {
//    oneof primary_geoms {
        GeometryBagData geometry_bag = 1;
        OperatorRequest geometry_request = 2;
        GeometryBagData left_geometry_bag = 3;
        OperatorRequest left_geometry_request = 4;
//    }

//    oneof secondary_geoms {
        GeometryBagData right_geometry_bag = 5;
        OperatorRequest right_geometry_request = 6;
//    }

    ServiceOperatorType operator_type = 7;

    GeometryEncodingType results_encoding_type = 8;

    SpatialReferenceData operation_spatial_reference = 9;

    SpatialReferenceData result_spatial_reference = 10;

//    oneof params {
        BufferParams buffer_params = 11;
        ConvexParams convex_params = 12;
        RelateParams relate_params = 13;
        RandomPointsParams random_points_params = 14;
        GeneralizeParams generalize_params = 15;
        IntersectionParams intersection_params = 16;
        OffsetParams offset_params = 17;
        CutParams cut_params = 18;
        ClipParams clip_params = 19;
        DensifyParams densify_params = 20;
        SimplifyParams simplify_params = 21;
        GeneralizeByAreaParams generalize_by_area_params = 22;
//    }
}


message EnvelopeData {
    double xmin = 1;
    double ymin = 2;
    double xmax = 3;
    double ymax = 4;
    SpatialReferenceData spatial_reference = 5;
}

